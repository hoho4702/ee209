백진영 20240344 assign5

README: 과제 5 - Unix Shell
프로젝트 개요

이 프로젝트는 `ish`라는 최소한의 기능을 갖춘 대화형 Unix 셸을 구현하는 것입니다. 이 셸은 사용자가 운영 체제와 상호작용하여 명령어를 실행할 수 있도록 지원합니다. 주요 기능은 다음과 같습니다:

- 사용자의 명령어를 입력받고 해석.
- `execvp`와 `fork`와 같은 시스템 호출을 이용해 명령어 실행.
- 리다이렉션과 파이프 처리.
- 셸 내장 명령어 구현.

주요 기능

1. 초기화:
   - 시작 시 사용자의 `HOME` 디렉터리에 있는 `.ishrc` 파일에서 명령을 읽고 실행합니다.
   - `.ishrc` 파일이 없거나 읽을 수 없는 경우를 정상적으로 처리합니다.

2. 대화형 동작:
   - `% ` 프롬프트를 표시해 입력 대기 상태를 알립니다.
   - 사용자 명령어를 파싱하고 유효성을 검증합니다.
   - 명령어를 실행하고 오류를 적절히 처리합니다.

3. 내장 명령어:
   - `exit`, `chdir`, `setenv`, `unsetenv`와 같은 셸 명령어를 지원합니다.

4. 리다이렉션과 파이프:
   - 입력 및 출력 리다이렉션(`<`, `>`)과 명령어 파이프(`|`)를 처리합니다.

5. 오류 처리:
   - `stderr`에 `sampleish` 프로그램과 동일한 형식의 오류 메시지를 출력합니다.
   - 잘못된 사용자 입력으로 인해 프로그램이 충돌하지 않도록 합니다.

6. 신호 처리:
   - `SIGQUIT`, `SIGINT`와 같은 신호에 적절히 응답합니다.

7. 메모리 관리:
   - 할당된 메모리를 적절히 해제하여 메모리 누수를 방지합니다.

---

시작하기

1. 사전 준비:
   - C 컴파일러 및 관련 도구가 설치되어 있어야 합니다.
   - Unix 명령어 및 C 프로그래밍에 대한 기본 지식이 필요합니다.

2. 설정:
   - 제공된 참조 파일을 압축 해제합니다:
     
     $ wget http://ee209.kaist.ac.kr/assignments/assignment5/assignment5.tar.gz
     $ mkdir assignment5
     $ mv assignment5.tar.gz assignment5
     $ cd assignment5
     $ tar -zxvf assignment5.tar.gz
     

3. 프로그램 빌드:
   - 제공된 `Makefile`을 사용하여 컴파일합니다:
     
     $ make
     

4. 셸 실행:
   - `ish` 셸을 시작합니다:
     $ ./ish
     

 프로그램 테스트

1. 대화형 테스트:
   - `ish` 셸에서 명령어를 직접 입력해보고 `sampleish` 프로그램과 결과를 비교합니다.

2. 자동화된 테스트:
   - `test.py` 스크립트를 사용합니다:
     
     $ cp ish tools
     $ cd tools
     $ python test.py
     

3. 사용자 정의 테스트 케이스:
   - `assignment5/tests/input`와 `assignment5/tests/output` 디렉터리에 새로운 테스트 케이스를 추가하여 테스트합니다.


